day01(09/15)

김근호 
010 5277 0535 

플러터


그날배운거 블로그로 만드세요.


모두가할수있는 UI



안드로이드 리눅스 기반
프레임워크


라이브러리/
실행의 흐름을 제어하는거 


프레임워크/
정해진 실행의 흐름에 따라 하나의 프로그램을 만들어줄수 있음.

클래스 다이어그램
https://blog.naver.com/devnote1
상속은 실선
인터페이스는 점선
추상클래스는 이탤릭체


객체 :
상태와 행위를 가질수있는것들.
사자 고양이 개 , 먹고 ,달리고 체중, 털 등등

-> 동물은 객체가 아님 


컴파일:
사람이 입력한 코드를 기계어로 번역하는과정



객체지향 패러다임
객체와 객체간의 상태, 객체와 객체간의 관계 중심

패키지 
폴더지만 개발도구에서 다룰떈 패키지라 부르는거임.

기본 7.0(누가)

C:\Users\82109\AndroidStudioProjects \MyApplication


안드로이드 docs
https://developer.android.com/training/basics/firstapp


개발자도구 들어가기
buildnumer 5번클릭

단축키
run shift f10 
코드 정렬 ctrl alt l 


protected 상속받은것만 접근가능함.

java main 함수
프로그램이 시작될때 가장먼저 시작되는 함수(코드의 시작점)


LinearLayout 속성 중..
android:orientation="horizontal" 자식 요소를 수평으로 정렬
android:orientation="vertical" 수직으로 정렬
android:gravity="right"    //float 이랑 같은개념
android:layout_gravity="center"   // layout_붙은게 우선순위로 적용
    layout_weight : 비율
    match_parent : 부모요소 크기맞춤
    wrap_content : 콘텐츠 크기에 맞춤

@상대경로/절대경로 같은 개념


==================================================
안드로이드에서 화면을 그리는 방법

XML을 이용한다.
DSL Language -> 범주(Domain), 특화(specific
안드로이드 UI를 그리기 위해 특화된 언어이다.

핸드폰마다 화면크기가 다 다른데 어떻게 화면을 그려야 할까?

픽셀, dpi, dp --> 단위

픽셀 -> 핸드폰 화면에서 빛이 나오는 전구 -> 가장 작은 단위
//고해상도란 ? 정해진 범위 안에어 전구가 많이 있다는 얘기이다.
//dpi -> dot per inch 1인치(2.54cm)

스마트폰 기준 dpi
ldpi : 120(1인치당 120pixel이 들어감)
mdpi : 160
hdpi : 240
xhdpi : 360(1 ,360pixel , 자주씀)
xxhdpi : 480
xxxhdpi : 640

ui를 통일 시켜 주어야 한다.
어느 기종에서나 우리가 원하는 ui모양, 크기가 나올수 있도록 만들어 주어야 한다.

dp -> density Independent Pixel
--> 픽셀에 독립적인 단위
--> dp라는 단위를 사용하면 다양한 해상도의 핸드폰에서 동일 크기로 보이게 된다.
--> 안드로이드에서 주로 사용하게 되는 단위


SP , dp
텍스트 Size는 sp를 사용하기도함.
(어르신 글자 사이즈 이런것들 ..)


==================================================
Day2

https://github.com/insertvalue2 안드로이드 예제 여기서 보시던데 ?

버튼  //쪼갤수도있고 등등함
백그라운드 tint 씀



android:weightSum="5" 리니어 레이아웃크기를 5라고 하고 안에있는요소들의 값을 layout_weight에 비율만큼 나눠서 값줌


	
RelativeLayout.. 속성중

Relative Layout 
android:layout_centerInParent="true" 중앙으로

android:layout_above="@+id/view5" 기준 위쪽으로 배치
android:layout_below="@+id/view5" 기준 아래쪽으로 배치

android:layout_toRightOf="@+id/view5" 기준 오른쪽으로 배치

텍스트 가운데정렬
        android:gravity="center"
        android:text="안녕하세요"
        android:textAlignment="center"


하드코딩 : 각 문자열마다 변수를 지정해주는것(?)
타겟 누르고 보면 String.xml에 변수처럼 지정된거있음



레이아웃 더 배울거
프레임
업세인트


-------------------------------
클래스 다이어그램 

+ pulbic
- private
아무것도없으면 default


객체는 상태와 행위가 중요합니다. 즉 클래스와 메서드

자바프로그램이 실행되면 
main 함수가 실행됨 따라서 코드의 시작점이다.

main 설명 
함수를 실행시키면
jvm 동적메모리 할당중 
heap메모리 영역에 new로 생성시킨 인스턴스들이 할당됨.


-------------------------------



============================================
day3
Frame layout
        Frame Layout은 자식뷰를 겹치게 만들수 있다.

        부모 레이아웃이 리니어 레이아웃이면 자식뷰들은 절대 겹칠수 없다.

------
        렐러티브 레이아웃도 뷰를 겹칠 수 있다.
        상대적으로 위치를 계산하기 때문에 메모리에 낭비가 많다.
        가능하면 framelayout으로 사용하기를 권장



우측 하단 Layout inspector 버튼
--> 3d로 프레임레이아웃 겹친 형태를 볼수있음


layout gravity =center 부모를기준으로 가운데 정렬


plugins
--> 작업창에서 shift 2번(!!)
android-drawable-importer-intellij-plugin-0.5-81
지원안해서 
android drawable importer plugin not found
stackoverflow에있는 걸 다운받아서 해결

Desktop\MyApplication\app\src\main\res
아래경로에 해상도별 이미지파일같은거 세팅해주는거임 원래.
(hdpi , mdpi, xhdpi , xxhdpi, xxxhdpi 폴더)

drawable-v24
이폴더는 벡터이미지 넣는 폴더


Imageview
android:scaleType="center" 그냥 가운데로
android:scaleType="centerCrop" 넘치는 부분을 잘르면서 크기 맞춤 "중요, 자주씀"
android:scaleType="fitEnd" 사이즈 끝에 맞추기



        xml언어는 문법적으로 느슨한 언어이기 떄문에 오류찾기가 쉽지 않을 수 있다

        1. scrollView -> 오직 하나의 자식 뷰만 가질 수 있다.
        2. android:fillViewport="true" 무조건 사용해주세요.


아이콘 받을수있는 사이트 (png, svg)
https://freeicons.io/


ScollView 특이사항 = 항상주의!!
안에 자식요소 하나만 넣을수 있다.
LinearLayout 두개씩 넣는 뻘짓 금지!!



============================================
day4

shift + enter 커서줄바꿈

------
AndroidManifest.xml 앱에서 어떤역할을하는지 정의되있는 파일? 
	
	<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    	package="com.example.myapplication">

	<application
       	android:allowBackup="true"
      	android:icon="@mipmap/ic_launcher"
        	android:label="@string/app_name"
        	android:roundIcon="@mipmap/ic_launcher_round"
        	android:supportsRtl="true"
        	android:theme="@style/Theme.MyApplication">
        	<activity
          	  android:name=".MainActivity"
              android:exported="true">
	            <intent-filter>
              	  <action android:name="android.intent.action.MAIN" />

                	 <category android:name="android.intent.category.LAUNCHER" />
            	</intent-filter>
	 </activity>
    	</application>

	</manifest>	

    안드로이드 패키지 명은 고유한 이름으로 만들어져야 한다.

    package : 회사명, 프로그램명 따위를 나타냄
    application : 운영체제를 제외한 모든 프로그램
    allowBackup : 로그인, 좋아요 등을 앱을 지웠다 재설치 할때 일정부분을 다시 불러올 수 있게 해주는 부분 
    supportsRtl : true이면 문자 등을 왼쪽에서 오른쪽으로 (역방향으로 문자읽는 나라등을 고려)
    exported -> 다른앱이나 시스템에서 해당 서비스를 access 할 수 있음을 의미 (보안적인 부분)


----
java(generated) : 안드스튜디오에서 자동으로 만들어주는 파일들
res : 리소스파일들 
	drawable : 그림이나 이미지 등등
	layout : 페이지(view)
	mipmap : 아이콘 로고같은것
	values : 변수와 값등 지정해서 사용자가 쓸수있는거
Gradle Scripts : 
	build.gradle 의존성 주입활용, 프로젝트 단위로 앱을 사용하거나 할떄 필요...

------------------------------------------------------------------------------------
빌드.그래들 내부 코드 해설

	android {
    compileSdk 31 // 마지막에 컴파일 할 때 해당 버전 기준으로 (기계어로) 바꾼다.

    defaultConfig {
        applicationId "com.example.myactivity_1" // 유니크, 고유해야함.
        minSdk 24   // 우리가 만든 앱을 설치하려면 그 핸드폰 기종에 os는 24버전 이상이어야 함을 명시
        targetSdk 31 // 현재 빌드 버전
        versionCode 1   //업데이트할떄 버전코드와 버전네임을 올려줌.
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //테스트할때 런하는 기능
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        //릴리즈, debug 등 사용. 여기서 proguard는 코드를 난독화하는 기능.
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

//우리 앱에서 사용하는 의존성을 추가하거나 (기능, 라이브러리) 삭제하고 확인할 수 있음.
dependencies {

    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}
------------------------------------------------------------------------------------


ctrl + o 사용가능한 메서드검색
ctrl + p ()안에 들어가는거 검색

logcat
로그 메세지를 보여주는데 클릭하면 하위것으로 내려감 
verbose 전부
warn 부터 asset까지 등등

edit filter configuration
원하는 로그만 볼수 있도록 필터지정 가능


-----------------------------------------------------------------------------------
액티비티 라이프사이클
https://developer.android.com/guide/components/activities/activity-lifecycle

01.Activity
    - 앱의 한 화면이다.
    - 첫 화면에서 다른 화면으로 넘어간다는 것은 activity가 바뀐다.
    - Life Cycle(수명주기) : 즉, activity의 생성과 소멸.
    - 콜백 : 특정한 동작이 발생되면 다시 알려준다.

  = activity 핵심 6가지 콜백
  onCreate(), onStart(), onResume(), onPause(), onStop(), onDestroy()


  onCreate()
  -> activity가 만들어 질때 단 한번만 호출된다.
  -> 단 한번만 해야되는 작업들을 여기서 해준다.


  onStart()
   -> 호출이 되면 화면이 사용자에게 표시되고 foreGround에 보내
      사용자와 상호작용을 할 수 있도록 준비한다.

   onResume()
    -> 화면이 전부 올라왔을때
    -> activity가 다시 호출 될 때 하면 되는 작업들을 여기에서 해 준다.

    onPause()
    -> 화면의 일부가 가려졌을 때 호출된다.

    onStop()
     -> 화면 전부가 보이지 않을때
     -> 임시데이터를 저장해 놓을 수 있다.

     onDestroy()
     -> 사용자가 화면을 닫거나 finish가 호출 되어 종료되는 경우
     -> 구성 변경 상태(기기 회전 또는 멀티 윈도우 모드)로 인해 시스템이 일시적으로 화면을 소멸시키는 경우

 : 특정 동작에 맞는 코드를 작성해 주어야한다.

 onPause와 onStop 상태는 정확하게 구분짓기 어렵다. (디바이스마다 상태가 다를수도 있음)
 관련 동작 기능을 만들때 가능한 한 곳에서 작업을 하게 하는것이 좋다.
---------------------------------------------------------------------------------

갑자기 자바 잠깐

TextView tvHello = findViewById(R.id.tvHello);

TextView는 기본타입(String, int, double 등)
tvHellow는 참조타입(주소값이 담김)

---------------------------------------------------------------------------------

ctrl +d 라인복사 


============================================
day5

안드로이드에서 필요한 자바개념
추상메서드 
템플릿메서드 (프레임워크에서 사용되는 개념)
쓰레드
싱크로나이즈
